using System;
using System.Collections.Generic;
using System.Linq;
using EnvDTE;

namespace ApiControllerGenerator.CodeSnippet
{
    public class CodeSnippets
    {
        public static string ApiProjectName = "ApiProject";
        public static string RepositoryProjectName = "Repository";
        public static string RepositoryModelsFolderName = "Models";
        public static string ControllerInheritance = "ApiController";
        private static readonly string _header = @"/*
The next code was generated by API Controller Generator.
Be free to modify this file.

Developed and designed by Francisco López Sánchez.
*/
";

        public static string GetRepositoryController(string className, List<Tuple<string, string>> primaryKeys,
            bool cors, bool dependencies, string dbContext)
        {

            var dependencyConstructor = "";
            if (dependencies)
            {
                dependencyConstructor = @"      [Dependency]
        public IRepository<" + className + @", " + className + @"ViewModel> " + className + @"Repository { get; set; }
";
            }
            else
            {
                dependencyConstructor = @"
        private IRepository<" + className + @", " + className + @"ViewModel> " + className + @"Repository;

        public " + className + @"Controller()
        {
            " + className + @"Repository = new EntityRepository<" + className + @", " + className + @"ViewModel>(new " +
                                        dbContext + @"());
        }";
            }
            var corsUsing = "";
            if (cors)
                corsUsing = @"
using System.Web.Http.Cors;";
            var corsAnnotation = @"[EnableCors(origins: "" * "", headers: "" * "", methods: "" * "")]";
            var argumentPkLine = "";
            var getDeleteByIdLine = "";
            var httpPutPkLine = "";
            for (var i = 0; i < primaryKeys.Count; i++)
            {
                if (i == 0)
                {
                    argumentPkLine += "[FromUri]" + primaryKeys[i].Item2 + " id";
                    getDeleteByIdLine += "id";
                    httpPutPkLine += "id != model." + primaryKeys[i].Item1;
                    continue;
                }
                argumentPkLine += ", [FromUri]" + primaryKeys[i].Item2 + " id" + (i + 1);
                getDeleteByIdLine += ", id" + (i + 1);
                httpPutPkLine += " || id" + (i + 1) + " != model." + primaryKeys[i].Item1;
            }


            var code = @"" + _header + @"
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using System.Web.Http.Description;
using Microsoft.Practices.Unity;" + corsUsing + @"
using " + ApiProjectName + @".Controllers;
using " + RepositoryProjectName + @"." + RepositoryModelsFolderName + @";
using " + RepositoryProjectName + @".Repository;
using " + RepositoryProjectName + @".ViewModels;

namespace " + ApiProjectName + @".Controllers
{
" + corsAnnotation + @"
    public class " + className + @"Controller : " + ControllerInheritance + @"
    {" + dependencyConstructor + @"

        //GET
        [ResponseType(typeof(" + className + @"ViewModel))]
        public IHttpActionResult Get()
        {
            return Ok(" + className + @"Repository.Get());
        }

        //GET BY ID
        [ResponseType(typeof(" + className + @"ViewModel))]
        public IHttpActionResult Get(" + argumentPkLine + @")
        {
            var data = " + className + @"Repository.Get(" + getDeleteByIdLine + @");

            if (data == null)
                return NotFound();

            return Ok(data);
        }

        //POST
        [ResponseType(typeof(" + className + @"ViewModel))]
        public IHttpActionResult Post([FromBody] " + className + @"ViewModel model)
        {
            if (!ModelState.IsValid)
                return BadRequest();

            var resModel = " + className + @"Repository.Add(model);
            return Created(""DefaultApi"", resModel);
        }

        //PUT
        [ResponseType(typeof(" + className + @"ViewModel))]
        public IHttpActionResult Put(" + argumentPkLine + @", [FromBody] " + className + @"ViewModel model)
        {
            if (!ModelState.IsValid)
                return BadRequest();

            if (" + httpPutPkLine + @")
                return BadRequest();

            if (" + className + @"Repository.Get(" + getDeleteByIdLine + @") == null)
                return NotFound();

            return Ok(" + className + @"Repository.Update(model));
        }

        //DELETE
        [ResponseType(typeof(" + className + @"ViewModel))]
        public IHttpActionResult Delete(" + argumentPkLine + @")
        {
            var model = " + className + @"Repository.Get(" + getDeleteByIdLine + @");

            if (model == null)
                return NotFound();

            return Ok(" + className + @"Repository.Delete(" + getDeleteByIdLine + @"));
        }
    }
}";
            return code;
        }

        public static string GetBootstrapper(List<string> classes, string entityDbContext)
        {
            var types = classes.Aggregate("",
                (current, c) =>
                    current +
                    $"\n            container.RegisterType<IRepository<{c}, {c}ViewModel>, EntityRepository<{c}, {c}ViewModel>>();");
            var code = @"" + _header + @"
using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Linq;
using System.Web;
using Microsoft.Practices.Unity;
using " + RepositoryProjectName + @"." + RepositoryModelsFolderName + @";
using " + RepositoryProjectName + @".Repository;
using " + RepositoryProjectName + @".ViewModels;

namespace " + ApiProjectName + @"
{
    public class Bootstrapper
    {
        public static void InitUnity(UnityContainer container)
        {
            container.RegisterType<DbContext, " + entityDbContext + @">();
" + types + @"
        }
    }
}";
            return code;
        }

        public static string GetBaseController(string controllerName)
        {
            var code = @"" + _header + @"
using System.Web.Http;

namespace " + RepositoryProjectName + @".Controllers
{
    public class " + controllerName + @" : ApiController
    {
    }
}
";
            return code;
        }
    }
}
